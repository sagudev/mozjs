diff --git a/js/moz.configure b/js/moz.configure
index 6e5bc71e7..50b118af6 100644
--- a/js/moz.configure
+++ b/js/moz.configure
@@ -172,6 +172,25 @@ def enable_decorators(value):
 set_config("ENABLE_DECORATORS", enable_decorators)
 set_define("ENABLE_DECORATORS", enable_decorators)
 
+
+# Enable JS Streams
+# ===================================================
+option(
+    "--enable-js-streams",
+    default=False,
+    help="Enable non-default JS Streams implementation",
+)
+
+
+@depends("--enable-js-streams")
+def enable_js_streams(value):
+    if value:
+        return True
+
+
+set_config("MOZ_JS_STREAMS", enable_js_streams)
+set_define("MOZ_JS_STREAMS", enable_js_streams)
+
 # Enable explicit resource management
 # ===================================================
 option(
diff --git a/js/public/ProtoKey.h b/js/public/ProtoKey.h
index fe8a191f0..d119308ce 100644
--- a/js/public/ProtoKey.h
+++ b/js/public/ProtoKey.h
@@ -134,6 +134,17 @@
   REAL(AsyncFunction, CLASP(AsyncFunction))                                 \
   REAL(GeneratorFunction, CLASP(GeneratorFunction))                         \
   REAL(AsyncGeneratorFunction, CLASP(AsyncGeneratorFunction))               \
+  IF_JS_STREAMS(REAL(ReadableStream, &js::ReadableStream::class_))          \
+  IF_JS_STREAMS(REAL(ReadableStreamDefaultReader,                           \
+                     &js::ReadableStreamDefaultReader::class_))             \
+  IF_JS_STREAMS(REAL(ReadableStreamDefaultController,                       \
+                     &js::ReadableStreamDefaultController::class_))         \
+  IF_JS_STREAMS(REAL(ReadableByteStreamController,                          \
+                     &js::ReadableByteStreamController::class_))            \
+  IF_JS_STREAMS(REAL(ByteLengthQueuingStrategy,                             \
+           &js::ByteLengthQueuingStrategy::class_))                         \
+  IF_JS_STREAMS(REAL(CountQueuingStrategy,                                  \
+           &js::CountQueuingStrategy::class_))                              \
   REAL(WebAssembly, OCLASP(WasmNamespace))                                  \
   REAL(WasmModule, OCLASP(WasmModule))                                      \
   REAL(WasmInstance, OCLASP(WasmInstance))                                  \
diff --git a/js/public/RealmOptions.h b/js/public/RealmOptions.h
index b3ab20915..f199a1ee3 100644
--- a/js/public/RealmOptions.h
+++ b/js/public/RealmOptions.h
@@ -172,6 +172,19 @@ class JS_PUBLIC_API RealmCreationOptions {
   bool getCoopAndCoepEnabled() const;
   RealmCreationOptions& setCoopAndCoepEnabled(bool flag);
 
+  bool getStreamsEnabled() const { return streams_; }
+  RealmCreationOptions& setStreamsEnabled(bool flag) {
+#ifdef MOZ_JS_STREAMS
+#  ifdef MOZ_DOM_STREAMS
+#    error "JS and DOM streams shouldn't be simultaneously configured"
+#  endif
+    streams_ = flag;
+#else
+    MOZ_ASSERT(!streams_);
+#endif
+    return *this;
+  }
+
   bool getToSourceEnabled() const { return toSource_; }
   RealmCreationOptions& setToSourceEnabled(bool flag) {
     toSource_ = flag;
@@ -237,6 +250,7 @@ class JS_PUBLIC_API RealmCreationOptions {
   bool sharedMemoryAndAtomics_ = false;
   bool defineSharedArrayBufferConstructor_ = true;
   bool coopAndCoep_ = false;
+  bool streams_ = false;
   bool toSource_ = false;
 
   bool secureContext_ = false;
diff --git a/js/public/TypeDecls.h b/js/public/TypeDecls.h
index d82405b17..adaf40e93 100644
--- a/js/public/TypeDecls.h
+++ b/js/public/TypeDecls.h
@@ -141,6 +141,13 @@ using jsid = JS::PropertyKey;
 #  define IF_RECORD_TUPLE(x, ...) __VA_ARGS__
 #endif
 
+// Follows the same pattern as IF_RECORD_TUPLE
+#ifdef MOZ_JS_STREAMS
+#  define IF_JS_STREAMS(x, ...) x
+#else
+#  define IF_JS_STREAMS(x, ...) __VA_ARGS__
+#endif
+
 // Follows the same pattern as IF_RECORD_TUPLE
 #ifdef ENABLE_DECORATORS
 #  define IF_DECORATORS(x, ...) x
diff --git a/js/src/builtin/TestingFunctions.cpp b/js/src/builtin/TestingFunctions.cpp
index 4e10adcbf..ef8f88598 100644
--- a/js/src/builtin/TestingFunctions.cpp
+++ b/js/src/builtin/TestingFunctions.cpp
@@ -4542,6 +4542,12 @@ static bool RejectPromise(JSContext* cx, unsigned argc, Value* vp) {
   return result;
 }
 
+static bool StreamsAreEnabled(JSContext* cx, unsigned argc, Value* vp) {
+  CallArgs args = CallArgsFromVp(argc, vp);
+  args.rval().setBoolean(cx->realm()->creationOptions().getStreamsEnabled());
+  return true;
+}
+
 static unsigned finalizeCount = 0;
 
 static void finalize_counter_finalize(JS::GCContext* gcx, JSObject* obj) {
@@ -9648,6 +9654,10 @@ JS_FN_HELP("rejectPromise", RejectPromise, 2, 0,
 "rejectPromise(promise, reason)",
 "  Reject a Promise by calling the JSAPI function JS::RejectPromise."),
 
+JS_FN_HELP("streamsAreEnabled", StreamsAreEnabled, 0, 0,
+"streamsAreEnabled()",
+"  Returns a boolean indicating whether WHATWG Streams are enabled for the current realm."),
+
     JS_FN_HELP("makeFinalizeObserver", MakeFinalizeObserver, 0, 0,
 "makeFinalizeObserver()",
 "  Get a special object whose finalization increases the counter returned\n"
diff --git a/js/src/jsapi-tests/moz.build b/js/src/jsapi-tests/moz.build
index e24b9bf43..d31caa78b 100644
--- a/js/src/jsapi-tests/moz.build
+++ b/js/src/jsapi-tests/moz.build
@@ -173,6 +173,11 @@ if not CONFIG["JS_CODEGEN_NONE"]:
         "testsJit.cpp",
     ]
 
+if CONFIG["MOZ_JS_STREAMS"]:
+    UNIFIED_SOURCES += [
+        "testReadableStream.cpp",
+    ]
+
 if CONFIG["NIGHTLY_BUILD"]:
     # The Error interceptor only exists on Nightly.
     UNIFIED_SOURCES += [
diff --git a/js/src/moz.build b/js/src/moz.build
index 90dca3e7f..390e358f4 100755
--- a/js/src/moz.build
+++ b/js/src/moz.build
@@ -201,6 +201,7 @@ EXPORTS.js += [
     "../public/SourceText.h",
     "../public/StableStringChars.h",
     "../public/Stack.h",
+    "../public/Stream.h",
     "../public/StreamConsumer.h",
     "../public/String.h",
     "../public/StructuredClone.h",
diff --git a/js/src/vm/GlobalObject.cpp b/js/src/vm/GlobalObject.cpp
index cd50c9ddc..a42601331 100644
--- a/js/src/vm/GlobalObject.cpp
+++ b/js/src/vm/GlobalObject.cpp
@@ -26,6 +26,11 @@
 #include "builtin/FinalizationRegistryObject.h"
 #include "builtin/MapObject.h"
 #include "builtin/ShadowRealm.h"
+#include "builtin/Stream.h"
+#include "builtin/streams/QueueingStrategies.h"  // js::{ByteLength,Count}QueueingStrategy
+#include "builtin/streams/ReadableStream.h"  // js::ReadableStream
+#include "builtin/streams/ReadableStreamController.h"  // js::Readable{StreamDefault,ByteStream}Controller
+#include "builtin/streams/ReadableStreamReader.h"  // js::ReadableStreamDefaultReader
 #include "builtin/Symbol.h"
 #ifdef JS_HAS_TEMPORAL_API
 #  include "builtin/temporal/Calendar.h"
@@ -211,6 +216,15 @@ bool GlobalObject::skipDeselectedConstructor(JSContext* cx, JSProtoKey key) {
     case JSProto_PluralRules:
     case JSProto_RelativeTimeFormat:
       return false;
+#ifdef MOZ_JS_STREAMS
+    case JSProto_ReadableStream:
+    case JSProto_ReadableStreamDefaultReader:
+    case JSProto_ReadableStreamDefaultController:
+    case JSProto_ReadableByteStreamController:
+    case JSProto_ByteLengthQueuingStrategy:
+    case JSProto_CountQueuingStrategy:
+      return !cx->realm()->creationOptions().getStreamsEnabled();
+#endif
 
     case JSProto_Segmenter:
 #  if defined(MOZ_ICU4X)
