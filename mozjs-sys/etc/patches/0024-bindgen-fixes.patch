diff --git a/js/public/CompileOptions.h b/js/public/CompileOptions.h
index 01a84b239..d3a6a650d 100644
--- a/js/public/CompileOptions.h
+++ b/js/public/CompileOptions.h
@@ -221,7 +221,7 @@ class JS_PUBLIC_API PrefableCompileOptions {
  * Use this in code that needs to propagate compile options from one
  * compilation unit to another.
  */
-class JS_PUBLIC_API TransitiveCompileOptions {
+class JS_PUBLIC_API __attribute__((__packed__)) TransitiveCompileOptions {
   friend class JS_PUBLIC_API ReadOnlyDecodeOptions;
 
  protected:
@@ -455,7 +455,8 @@ class JS_PUBLIC_API TransitiveCompileOptions {
  * is protected anyway); instead, create instances only of the derived classes:
  * CompileOptions and OwningCompileOptions.
  */
-class JS_PUBLIC_API ReadOnlyCompileOptions : public TransitiveCompileOptions {
+class JS_PUBLIC_API __attribute__((__packed__)) ReadOnlyCompileOptions
+    : public TransitiveCompileOptions {
  public:
   // POD options.
 
diff --git a/js/public/Proxy.h b/js/public/Proxy.h
index 45ba4a137..af1f8881d 100644
--- a/js/public/Proxy.h
+++ b/js/public/Proxy.h
@@ -156,7 +156,7 @@ class JS_PUBLIC_API Wrapper;
  * explicit override for the method in SecurityWrapper. See bug 945826 comment
  * 0.
  */
-class JS_PUBLIC_API BaseProxyHandler {
+class JS_PUBLIC_API __attribute__ ((__packed__)) BaseProxyHandler {
   /*
    * Sometimes it's desirable to designate groups of proxy handlers as
    * "similar". For this, we use the notion of a "family": A consumer-provided
diff --git a/js/public/Wrapper.h b/js/public/Wrapper.h
index 197d76f11..0e39b6d2d 100644
--- a/js/public/Wrapper.h
+++ b/js/public/Wrapper.h
@@ -41,7 +41,7 @@ class MOZ_STACK_CLASS WrapperOptions : public ProxyOptions {
 
 // Base class for proxy handlers that want to forward all operations to an
 // object stored in the proxy's private slot.
-class JS_PUBLIC_API ForwardingProxyHandler : public BaseProxyHandler {
+class JS_PUBLIC_API __attribute__ ((__packed__)) ForwardingProxyHandler : public BaseProxyHandler {
  public:
   using BaseProxyHandler::BaseProxyHandler;
 
@@ -130,7 +130,7 @@ class JS_PUBLIC_API ForwardingProxyHandler : public BaseProxyHandler {
  * to add an override in CrossCompartmentWrapper. If you don't, you risk
  * compartment mismatches. See bug 945826 comment 0.
  */
-class JS_PUBLIC_API Wrapper : public ForwardingProxyHandler {
+class JS_PUBLIC_API __attribute__ ((__packed__)) Wrapper : public ForwardingProxyHandler {
   unsigned mFlags;
 
  public:
diff --git a/js/public/CharacterEncoding.h b/js/public/CharacterEncoding.h
index 9d1df4664..86646e13d 100644
--- a/js/public/CharacterEncoding.h
+++ b/js/public/CharacterEncoding.h
@@ -134,7 +134,7 @@ class UTF8CharsZ : public mozilla::RangedPtr<unsigned char> {
  * to others.  This differs from UTF8CharsZ in that the chars are
  * const and it disallows assignment.
  */
-class JS_PUBLIC_API ConstUTF8CharsZ {
+class JS_PUBLIC_API __attribute__((__packed__)) ConstUTF8CharsZ {
   const char* data_;
 
  public:
diff --git a/js/public/ColumnNumber.h b/js/public/ColumnNumber.h
index 9fd007f4b..adfce9dd2 100644
--- a/js/public/ColumnNumber.h
+++ b/js/public/ColumnNumber.h
@@ -304,7 +304,7 @@ struct LimitedColumnNumberOneOrigin : public detail::MaybeLimitedColumnNumber<
 };
 
 // Column number in 1-origin.
-struct ColumnNumberOneOrigin : public detail::MaybeLimitedColumnNumber<0> {
+struct __attribute__((__packed__)) ColumnNumberOneOrigin : public detail::MaybeLimitedColumnNumber<0> {
  private:
   using Base = detail::MaybeLimitedColumnNumber<0>;
 
